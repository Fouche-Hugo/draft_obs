// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do one of these:
//
//    using LoLApi;
//
//    var summoner = Summoner.FromJson(jsonString);
//    var session = Session.FromJson(jsonString);

namespace LoLApi
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Summoner
    {
        [JsonProperty("accountId")]
        public long AccountId { get; set; }

        [JsonProperty("displayName")]
        public string DisplayName { get; set; }

        [JsonProperty("internalName")]
        public string InternalName { get; set; }

        [JsonProperty("percentCompleteForNextLevel")]
        public long PercentCompleteForNextLevel { get; set; }

        [JsonProperty("profileIconId")]
        public long ProfileIconId { get; set; }

        [JsonProperty("puuid")]
        public Guid Puuid { get; set; }

        [JsonProperty("rerollPoints")]
        public RerollPoints RerollPoints { get; set; }

        [JsonProperty("summonerId")]
        public long SummonerId { get; set; }

        [JsonProperty("summonerLevel")]
        public long SummonerLevel { get; set; }

        [JsonProperty("xpSinceLastLevel")]
        public long XpSinceLastLevel { get; set; }

        [JsonProperty("xpUntilNextLevel")]
        public long XpUntilNextLevel { get; set; }
    }

    public partial class RerollPoints
    {
        [JsonProperty("currentPoints")]
        public long CurrentPoints { get; set; }

        [JsonProperty("maxRolls")]
        public long MaxRolls { get; set; }

        [JsonProperty("numberOfRolls")]
        public long NumberOfRolls { get; set; }

        [JsonProperty("pointsCostToRoll")]
        public long PointsCostToRoll { get; set; }

        [JsonProperty("pointsToReroll")]
        public long PointsToReroll { get; set; }
    }

    public partial class Session
    {
        [JsonProperty("summoners")]
        public List<Summoner> Summoners { get; set; } = new List<Summoner>();

        [JsonProperty("actions")]
        public Action[][] Actions { get; set; }

        [JsonProperty("allowBattleBoost")]
        public bool AllowBattleBoost { get; set; }

        [JsonProperty("allowDuplicatePicks")]
        public bool AllowDuplicatePicks { get; set; }

        [JsonProperty("allowLockedEvents")]
        public bool AllowLockedEvents { get; set; }

        [JsonProperty("allowRerolling")]
        public bool AllowRerolling { get; set; }

        [JsonProperty("allowSkinSelection")]
        public bool AllowSkinSelection { get; set; }

        [JsonProperty("bans")]
        public Bans Bans { get; set; }

        [JsonProperty("benchChampionIds")]
        public object[] BenchChampionIds { get; set; }

        [JsonProperty("benchEnabled")]
        public bool BenchEnabled { get; set; }

        [JsonProperty("boostableSkinCount")]
        public long BoostableSkinCount { get; set; }

        [JsonProperty("chatDetails")]
        public ChatDetails ChatDetails { get; set; }

        [JsonProperty("counter")]
        public long Counter { get; set; }

        [JsonProperty("entitledFeatureState")]
        public EntitledFeatureState EntitledFeatureState { get; set; }

        [JsonProperty("hasSimultaneousBans")]
        public bool HasSimultaneousBans { get; set; }

        [JsonProperty("hasSimultaneousPicks")]
        public bool HasSimultaneousPicks { get; set; }

        [JsonProperty("isSpectating")]
        public bool IsSpectating { get; set; }

        [JsonProperty("localPlayerCellId")]
        public long LocalPlayerCellId { get; set; }

        [JsonProperty("lockedEventIndex")]
        public long LockedEventIndex { get; set; }

        [JsonProperty("myTeam")]
        public Player[] MyTeam { get; set; }

        [JsonProperty("rerollsRemaining")]
        public long RerollsRemaining { get; set; }

        [JsonProperty("skipChampionSelect")]
        public bool SkipChampionSelect { get; set; }

        [JsonProperty("theirTeam")]
        public Player[] TheirTeam { get; set; }

        [JsonProperty("timer")]
        public Timer Timer { get; set; }

        [JsonProperty("trades")]
        public Trade[] Trades { get; set; }
    }

    public partial class Action
    {
        [JsonProperty("actorCellId")]
        public long ActorCellId { get; set; }

        [JsonProperty("championId")]
        public long ChampionId { get; set; }

        [JsonProperty("completed")]
        public bool Completed { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("isAllyAction")]
        public bool IsAllyAction { get; set; }

        [JsonProperty("isInProgress")]
        public bool IsInProgress { get; set; }

        [JsonProperty("pickTurn")]
        public long PickTurn { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class Bans
    {
        [JsonProperty("myTeamBans")]
        public object[] MyTeamBans { get; set; }

        [JsonProperty("numBans")]
        public long NumBans { get; set; }

        [JsonProperty("theirTeamBans")]
        public object[] TheirTeamBans { get; set; }
    }

    public partial class ChatDetails
    {
        [JsonProperty("chatRoomName")]
        public string ChatRoomName { get; set; }

        [JsonProperty("chatRoomPassword")]
        public string ChatRoomPassword { get; set; }
    }

    public partial class EntitledFeatureState
    {
        [JsonProperty("additionalRerolls")]
        public long AdditionalRerolls { get; set; }

        [JsonProperty("unlockedSkinIds")]
        public object[] UnlockedSkinIds { get; set; }
    }

    public partial class Player
    {
        [JsonProperty("assignedPosition")]
        public string AssignedPosition { get; set; }

        [JsonProperty("cellId")]
        public long CellId { get; set; }

        [JsonProperty("championId")]
        public long ChampionId { get; set; }

        [JsonProperty("championPickIntent")]
        public long ChampionPickIntent { get; set; }

        [JsonProperty("entitledFeatureType")]
        public string EntitledFeatureType { get; set; }

        [JsonProperty("playerType")]
        public string PlayerType { get; set; }

        [JsonProperty("selectedSkinId")]
        public long SelectedSkinId { get; set; }

        [JsonProperty("spell1Id")]
        public double Spell1Id { get; set; }

        [JsonProperty("spell2Id")]
        public double Spell2Id { get; set; }

        [JsonProperty("summonerId")]
        public long SummonerId { get; set; }

        [JsonProperty("team")]
        public long TeamTeam { get; set; }

        [JsonProperty("wardSkinId")]
        public long WardSkinId { get; set; }

        [JsonProperty("summonerName")]
        public String SummonerName { get; set; }
    }

    public partial class Timer
    {
        [JsonProperty("adjustedTimeLeftInPhase")]
        public long AdjustedTimeLeftInPhase { get; set; }

        [JsonProperty("adjustedTimeLeftInPhaseInSec")]
        public long AdjustedTimeLeftInPhaseInSec { get; set; }

        [JsonProperty("internalNowInEpochMs")]
        public long InternalNowInEpochMs { get; set; }

        [JsonProperty("isInfinite")]
        public bool IsInfinite { get; set; }

        [JsonProperty("phase")]
        public string Phase { get; set; }

        [JsonProperty("timeLeftInPhase")]
        public long TimeLeftInPhase { get; set; }

        [JsonProperty("timeLeftInPhaseInSec")]
        public long TimeLeftInPhaseInSec { get; set; }

        [JsonProperty("totalTimeInPhase")]
        public long TotalTimeInPhase { get; set; }
    }

    public partial class Trade
    {
        [JsonProperty("cellId")]
        public long CellId { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("state")]
        public string State { get; set; }
    }

    public partial class Summoner
    {
        public static Summoner FromJson(string json) => JsonConvert.DeserializeObject<Summoner>(json, LoLApi.Converter.Settings);
    }

    public partial class Session
    {
        public static Session FromJson(string json) => JsonConvert.DeserializeObject<Session>(json, LoLApi.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Summoner self) => JsonConvert.SerializeObject(self, LoLApi.Converter.Settings);
        public static string ToJson(this Session self) => JsonConvert.SerializeObject(self, LoLApi.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
